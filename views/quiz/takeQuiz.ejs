<%- include('../partial/head.ejs') %>

 <!--    <script src="/library/jquery.min.js"></script>
    <script src="/library/survey.jquery.min.js"></script>
    <script src="/library/survey.jquery.theme.index.min.js"></script>
    <link rel="stylesheet" href="/css/survey.css" /> -->

    <script src="https://unpkg.com/jquery/dist/jquery.min.js"></script>
    <script src="https://unpkg.com/survey-jquery@1.11.7/survey.jquery.min.js"></script>
    <script src="https://unpkg.com/survey-jquery@1.11.7/themes/index.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/survey-jquery@1.11.7/defaultV2.min.css" />

    <script src="https://cdnjs.cloudflare.com/ajax/libs/polyfill/7.0.0/polyfill.min.js"></script>
    <script>
        window.MathJax = {
            loader: { load: ['input/tex', 'output/chtml', 'input/mml'] },
            tex: { inlineMath: [['$', '$'], ['\\(', '\\)']] },
            svg: { fontCache: 'global' }
        };
    </script>
    <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script> 
    </head>

    <body>
        <div class="container">
            <h1>
                <%= quiz.title %>
            </h1>
            <div id="surveyElement"></div>
            <div id="resultsButton" style="display: none;">
                <a id="viewResults" class="btn btn-primary" href="#">نتيجة الاختبار</a>
            </div>
        </div>
        <script>
            $(document).ready(function () {

                //const json = <%#- JSON.stringify(quiz.quizSchema) %> ;
                //json.id = <%#= quiz.id %> ; // تضمين معرف الكويز في JSON      
                
                const json =  {"pages": [{
        "name": "startPage", "elements": [
            {"html": "<p>اختبار في السؤال الاول من اسئلة الوحدة الاولى للصف الثامن قسم الهندسة</p></br></br><i>هل سيحالفك الحظ ؟</i></br><img src='https://res.cloudinary.com/dg0d0jmtz/image/upload/v1722119336/quiz/Screenshot_2024-07-28_002751_cdys4n.png' width='100%' height='auto'></img>", "name": "welcomeMsg", "type": "html"}]}, 
      
         {   
            "elements": [
                    {
                    "type": "imagepicker",
                    "name": "question1",
                    "title": "ماهو ناتج ما يلي",
                    "correctAnswer": "Image 2",
                    "score": 2,
                    "choices": [
                        {
                        "value": "Image 1",
                        "imageLink": "https://res.cloudinary.com/dg0d0jmtz/image/upload/v1722118991/quiz/Screenshot_2024-07-28_002046_czxtpu.png"
                        },
                        {
                        "value": "Image 2",
                        "imageLink": "https://res.cloudinary.com/dg0d0jmtz/image/upload/v1722118989/quiz/Screenshot_2024-07-28_002105_mrhact.png"
                        },
                        {
                        "value": "Image 3",
                        "imageLink": "https://res.cloudinary.com/dg0d0jmtz/image/upload/v1722118988/quiz/Screenshot_2024-07-28_002124_su9uvz.png"
                        }
                    ],
                    "imageFit": "cover"
                    }]},

   
        {"elements": 
         
         [{"name": "qSecond", "type": "radiogroup", "score": 2,
            "title": "\\(P\\) نقطة غير واقعة على المستقيم \\(RS\\), و \\(Q\\) هي صورة \\(P\\) وفق الانسحاب الذي ينقل \\(R\\) إلى \\(S\\). \\n إذن:", 
            "choices": [{"text": "\\(RSPQ\\) هو متوازي أضلاع", "value": "1"}, 
            {"text": "\\(PQRS\\) هو متوازي أضلاع", "value": "2"}, 
            {"text": "\\(RSQP\\) هو متوازي أضلاع", "value": "3"}],
            "correctAnswer": "3"}]
        }, 
            
        {
            "elements": [{
                "type": "boolean",
                "name": "qThird",
                "score": 3,
                "title": "المربع هو معين",
                "labelTrue": "موافق",
                "labelFalse": "غير موافق",
                "correctAnswer": false
            }]
        }   
          
             
      
      ], 
      
      
      
         "logoPosition": "right", "completedHtml": "<h4>You got <b>{totalScore}</b> out of <b>{maxScore}</b> correct answers.</h4>", "showTimerPanel": "top", "showProgressBar": "top", "firstPageIsStarted": true, "maxTimeToFinishPage": 20, 
      
         "completedHtmlOnCondition": [{"html": "You got {totalScore} out of {maxScore} points.</br></br><h5>ممتاز نتيجتك رائعة !!</h5>", "expression": "{totalScore} >= 14"},
          
          {"html": "You got {totalScore} out of {maxScore} points.</br></br><i>لا بأس بإمكانك التحسن</i>", "expression": "{totalScore} = 13 || {totalScore} = 12 || {totalScore} = 11"},
          
          {"html": "You got {totalScore} out of {maxScore} points.</br></br><i>يجب عليك الدراسة بشكل اكبر</i>", "expression": "{totalScore} <= 10"}]}




                Survey.Serializer.addProperty("question", {
                    name: "score:number"
                });

                const survey = new Survey.Model(json);

                function calculateMaxScore(questions) {
                    let maxScore = 0;
                    questions.forEach((question) => {
                        if (question.score) {
                            maxScore += question.score;
                        }
                    });
                    return maxScore;
                }

                function calculateTotalScore(data) {
                    let totalScore = 0;
                    let correctAnswers = 0;
                    let incorrectAnswers = 0;

                    Object.keys(data).forEach((qName) => {
                        const question = survey.getQuestionByValueName(qName);
                        if (question && question.isAnswerCorrect()) {
                            correctAnswers++;
                            if (question.score) {
                                totalScore += question.score;
                            }
                        } else {
                            incorrectAnswers++;
                        }
                    });

                    return { totalScore, correctAnswers, incorrectAnswers };
                }

                survey.onComplete.add((sender) => {
                    const { totalScore, correctAnswers, incorrectAnswers } = calculateTotalScore(sender.data);
                    const maxScore = calculateMaxScore(sender.getAllQuestions());

                    sender.setValue("maxScore", maxScore);
                    sender.setValue("totalScore", totalScore);
                    sender.setValue("correctAnswers", correctAnswers);
                    sender.setValue("incorrectAnswers", incorrectAnswers);
                });

                survey.onComplete.add((sender) => {
                    const results = {
                        quizId: json.id,
                        userAnswers: sender.data,
                        userScore: sender.getValue('totalScore'),
                        maxScore: sender.getValue('maxScore'),
                        correctAnswers: sender.getValue('correctAnswers'),
                        incorrectAnswers: sender.getValue('incorrectAnswers')
                    };

                    console.log('Results to be sent:', results);

                    // إرسال النتائج إلى الخادم
                    $.ajax({
                        url: '/quiz/submit',
                        type: 'POST',
                        data: JSON.stringify(results),
                        contentType: 'application/json',
                        success: function (response) {
                            console.log('Server response:', response);
                            // عرض زر النتائج مع رابط إلى صفحة النتائج
                            $('#resultsButton').show();
                            $('#viewResults').attr('href', `/quiz/results/${response.resultId}`);
                        },
                        error: function (error) {
                            console.error('Error:', error);
                            alert('There was an error submitting your results. Please try again.');
                        }
                    });
                });


                // إعادة معالجة MathJax بعد عرض الأسئلة
                survey.onAfterRenderQuestion.add((survey, options) => {
                    if (window.MathJax) {
                        MathJax.typesetPromise().catch(function (err) {
                            console.error('MathJax typeset failed: ' + err.message);
                        });
                    }
                });
                survey.onAfterRenderQuestionInput.add((survey, options) => {
                    if (window.MathJax) {
                        MathJax.typesetPromise().catch(function (err) {
                            console.error('MathJax typeset failed: ' + err.message);
                        });
                    }
                });


                $("#surveyElement").Survey({ model: survey });

                // تأخير التنفيذ للتأكد من معالجة MathJax
                setTimeout(function () {
                    MathJax.typesetPromise().catch(function (err) {
                        console.error('MathJax typeset failed: ' + err.message);
                    });
                }, 500)

            });

        </script>
    </body>

    </html>